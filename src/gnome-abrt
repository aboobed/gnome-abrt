#!/usr/bin/python

import os
import sys
import logging

# pygobject
from gi.repository import Gtk

# pyxdg
import xdg
import xdg.BaseDirectory

# oops
import config
import views
import problems
import dbus_problems
import directory_problems
import controller
import errors
import l10n

class OopsApplication(Gtk.Application):
    
    def __init__(self):
        super(OopsApplication, self).__init__()

        conf = config.get_configuration()
        conf.add_option("all_problems", default_value=False)

        sources = []
        try:
            sources.append(dbus_problems.DBusProblemSource())
        except errors.UnavailableSource as e:
            logging.warning(e.message)

        try:
            # TODO : use pyxdg-0.21 save_cache_path()
            # or event better pass a directory through command line
            sources.append(directory_problems.DirectoryProblemSource(os.path.join(xdg.BaseDirectory.xdg_cache_home, "abrt/spool")))
        except errors.UnavailableSource as e:
            logging.warning(e.message)

        if len(sources) == 0:
            raise errors.UnavailableSource("No available problem source.")

        self.source = problems.MultipleSources(*sources)

    def do_activate(self):
        self.window = views.OopsWindow(self, self.source, controller.Controller())
        self.window.connect("delete-event", self.on_window_delete_event)
        self.window.show_all()

    def on_window_delete_event(self, widget, data):
        self.quit()


if __name__ == "__main__":
    l10n.init('gnome_abrt')

    app = None
    try:
        app = OopsApplication()
    except errors.UnavailableSource as e:
        logging.error(e.message)
        sys.exit(1)

    exit_code = app.run(sys.argv)
    sys.exit(exit_code)
